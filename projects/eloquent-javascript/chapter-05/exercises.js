// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  //use .reduce AND .concat
  const flatty = array.reduce(function(acc, cur){
    return acc.concat(cur); 
  }, [])
  return flatty;
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {

 while (test(value)){
  body(value);
  value = update(value);
 }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(arr, func) {

 for (let i = 0; i < arr.length; i++){
  if (arr.every(func)){
    return true;
  } else if(arr.some(func)){
    return false;
  }
 }
return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
let ltr = [];

let rtl = [];

for (let i = 0; i < string.length; i++){
  let script = characterScript(string.charCodeAt(i));
  if (script !== null){
    if (script.direction === 'ltr'){
      ltr.push(script);
    } else {
      rtl.push(script);
    }
  }
  }
  if (ltr.length > rtl.length){
    return 'ltr';
  } else {
    return 'rtl';
  }
}

function characterScript(code) {
  for (let script of SCRIPTS) {
    if (script.ranges.some(([from, to]) => {
      return code >= from && code < to;
    })) {
      return script;
    }
  }
  return null;
}

function countBy(items, groupName) {
  let counts = [];
  for (let item of items) {
    let name = groupName(item);
    let known = counts.findIndex(c => c.name == name);
    if (known == -1) {
      counts.push({name, count: 1});
    } else {
      counts[known].count++;
    }
  }
  return counts;
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
